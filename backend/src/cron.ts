import User from './user/models/User';
import EventModel from './event/models/Event';
import cron from 'node-cron';
import bot from './bot';
import { checkChatExistence } from './util';

cron.schedule('0 0 * * *', async () => {
  try {
    const users = await User.find();
    const currentDate = new Date();

    for (const user of users) {
      if (user.likedEvents) {
        const updatedLikedEvents: { title: string; date: string; message: string; ticketLink: string; }[] = []; // –û–±—ä—è–≤–ª—è–µ–º —Ç–∏–ø –∫–∞–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        for (const likedEvent of user.likedEvents) {
          const eventDate = new Date(likedEvent.date);
          if (eventDate >= currentDate) {
            updatedLikedEvents.push(likedEvent);
          }
        }
        user.likedEvents = updatedLikedEvents;
        await user.save();
      }
    }
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –∏–≤–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –∏–≤–µ–Ω—Ç–æ–≤:', error);
  }
});

cron.schedule('0 9 * * *', async () => {
  try {
    const users = await User.find();

    for (const user of users) {
      if (user.chatId) {
        const chatExists = await checkChatExistence(Number(user.chatId));
        if (!chatExists) {
          return;
        }
        if (chatExists) {
          const message = `üî• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 10 –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ 1000 —Ç–µ–Ω–≥–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É /ref –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üéâ`;
          await bot.sendMessage(Number(user.chatId), message);
          console.log('Referral notification sent to:', user.userName);
        }
      }
      
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ:', error);
  }
});
