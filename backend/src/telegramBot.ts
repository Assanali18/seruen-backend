import TelegramBot from 'node-telegram-bot-api';
import { getEventChunks, getRecommendations } from './recomendation';
import User from './user/models/User';
import 'dotenv/config';
import buyTickets from './buyTickets';
import EventModel, { IEvent } from './event/models/Event';
import cron from 'node-cron';
import { OpenAI } from 'openai';
import { Pinecone } from '@pinecone-database/pinecone';
import { SpeechClient } from '@google-cloud/speech';
import ffmpeg from 'fluent-ffmpeg';
import fs from 'fs';
import axios from 'axios';


// CHANGE TOKEN IF YOU DEPLOY
const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN_DEV || '';
if (!TELEGRAM_TOKEN) {
  throw new Error('TELEGRAM_TOKEN is not set');
}

const speechClient = new SpeechClient({
  keyFilename: process.env.GOOGLE_API_KEY,
});


const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
console.log('Telegram bot started');

const OPENAI_API_KEY = process.env.OPENAI_API_KEY!;
const PINECONE_API_KEY = process.env.PINECONE_API_KEY!;
const PINECONE_INDEX_NAME = process.env.PINECONE_INDEX_NAME!;

const openai = new OpenAI({ apiKey: OPENAI_API_KEY });
const pinecone = new Pinecone({ apiKey: PINECONE_API_KEY });
const index = pinecone.Index(PINECONE_INDEX_NAME);

interface UserPreferences {
  spendingLimit?: number;
  hobbies?: string[];
  userName?: string;
  recommendations?: string[];
  lastRecommendationIndex?: number;
  generatedPosts?: any[];
  lastGeneratedPostIndex?: number;
  pendingTicketPurchase?: {
    url: string;
    chatId: string;
  };
}

const userSetupStages: { [chatId: string]: { stage: number, field?: string } } = {};

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userName = msg.from?.username ||  '';
  const firstName = msg.from?.first_name ||  '';
  console.log('username', userName);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  const uniqueUserId = firstName ||  userName ||  `user_${chatId}`;

  if (uniqueUserId) {
    let user = await User.findOne({ userName: uniqueUserId });
    if (!user) {
      user = new User({
        userName: uniqueUserId,
        chatId,
        recommendations: [],
        lastRecommendationIndex: 0,
        generatedPosts: [],
        lastGeneratedPostIndex: 0,
        stopSession: false
      });
      await user.save();
      userSetupStages[chatId] = { stage: 0 };

      await bot.sendMessage(chatId, `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName}, –≤ Seruen! –ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞–º. –î–∞–≤–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –∏ –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ! –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç (–≤ —Ç–µ–Ω–≥–µ):`);
    } else {
      user.chatId = chatId.toString();
      user.stopSession = false;
      await user.save();

      const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName}, –≤ Seruen! –ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞–º. –¢–µ–ø–µ—Ä—å –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ!`;

      await bot.sendMessage(chatId, welcomeMessage);
      await bot.sendMessage(chatId, '–ú—ã –≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –û–Ω–∏ –Ω–∞—á–Ω—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ!');

      try {
        await bot.sendChatAction(chatId, 'typing');
        const events = await EventModel.find();
        const CHUNK_SIZE = 10;
        const eventChunks = getEventChunks(events, CHUNK_SIZE);
        const userRecomendation: { venue: string; ticketLink: string; message: string; score: number }[] = [];

        user.lastRecommendationIndex = 0;

        for (let i = 0; i < eventChunks.length; i++) {
          const chunk = eventChunks[i];
          const userSession = await User.findOne({ chatId });
          if (userSession?.stopSession) {
            return;
          }

          const recommendations = await getRecommendations(chunk, user);
          userRecomendation.push(...recommendations);

          console.log("USERRECOMMENDATIONS", userRecomendation);
        }

        user.recommendations = userRecomendation.sort((a, b) => b.score - a.score);
        console.log('DB RECOMMENDATIONS', user.recommendations);
        await User.findByIdAndUpdate(user._id, { recommendations: user.recommendations });

        await bot.sendMessage(chatId, '‚ú® –ú—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –≤–∞—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏!');

        await sendNextEvent(chatId);

      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è chatId ${chatId}:`, error);
        await bot.sendMessage(chatId, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.');
      }
    }
  }
});

bot.onText(/\/change_budget/, async (msg) => {
  const chatId = msg.chat.id;
  userSetupStages[chatId] = { stage: 0, field: 'budget' };
  await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç (–≤ —Ç–µ–Ω–≥–µ):');
});

bot.onText(/\/change_hobbies/, async (msg) => {
  const chatId = msg.chat.id;
  userSetupStages[chatId] = { stage: 0, field: 'hobbies' };
  await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–æ–≤—ã–µ —É–≤–ª–µ—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):');
});

bot.onText(/\/stop_session/, async (msg) => {
  const chatId = msg.chat.id;
  const user = await User.findOne({ chatId });
  if (user) {
    user.stopSession = true;
    await User.findByIdAndUpdate(user._id, { stopSession: true });
  }
  delete userSetupStages[chatId];
  await bot.sendMessage(chatId, 'üõë –°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.');
});

bot.onText(/\/next_event/, async (msg) => {
  const chatId = msg.chat.id;
  await sendNextEvent(chatId);
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userText = msg.text;
  const user = await User.findOne({ chatId });

  if (!user) {
    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.');
    return;
  }

  if (!(chatId in userSetupStages)) {
    try {
      bot.sendChatAction(chatId, 'typing');
      const classificationResult = await classifyAndEnhanceMessage(userText);

      if (classificationResult.isRelated) {
        console.log('User message is related:', classificationResult.response);
        
        const userEmbedding = await getEmbedding(classificationResult.response, user);
        const queryResponse = await index.query({
          vector: userEmbedding,
          topK: 10,
          includeMetadata: true,
        });

        if (queryResponse && queryResponse.matches && queryResponse.matches.length > 0) {
          const topResults = queryResponse.matches.map(match => match.metadata?.title).filter(Boolean);

          if (topResults.length > 0) {
            const mongoEvents = await EventModel.find({ title: { $in: topResults } });

            const formattedEvents = await getRecommendations(mongoEvents, { ...user, userPrompt: userText });

            user.generatedPosts = formattedEvents;
            user.lastGeneratedPostIndex = 0;
            await User.findByIdAndUpdate(user._id, { generatedPosts: user.generatedPosts, lastGeneratedPostIndex: user.lastGeneratedPostIndex });

            const firstEvent = formattedEvents[0];
            if (firstEvent && firstEvent.message) {
              await bot.sendMessage(chatId, `–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –¥–ª—è –≤–∞—Å:\n\n${firstEvent.message}`, {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üîú –°–ª–µ–¥—É—é—â–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–≤–µ–Ω—Ç", callback_data: 'next_generated_event' }]
                  ]
                }
              });
            }
          } else {
            await bot.sendMessage(chatId, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–≤–µ–Ω—Ç—ã.');
          }
        } else {
          await bot.sendMessage(chatId, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–≤–µ–Ω—Ç—ã.');
        }
      } else {
        console.log('User message is not related:', classificationResult.response);
        
        await bot.sendMessage(chatId, classificationResult.response);
      }
    } catch (error) {
      console.error('Error processing user message:', error);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    }
    return;
  }

  const { stage, field } = userSetupStages[chatId];

  switch (field) {
    case 'budget':
      user.spendingLimit = parseInt(msg.text);
      break;
    case 'hobbies':
      user.hobbies = msg.text.split(',').map(item => item.trim());
      break;
    default:
      switch (stage) {
        case 0:
          user.spendingLimit = parseInt(msg.text);
          userSetupStages[chatId] = { stage: 1 };
          await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):');
          return;
        case 1:
          user.hobbies = msg.text.split(',').map(item => item.trim());
          await User.findByIdAndUpdate(user._id, { spendingLimit: user.spendingLimit, hobbies: user.hobbies });
          delete userSetupStages[chatId];
          await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...');
          break;
      }
  }

  await User.findByIdAndUpdate(user._id, { spendingLimit: user.spendingLimit, hobbies: user.hobbies });
  delete userSetupStages[chatId];
  await bot.sendMessage(chatId, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...');

  try {
    await bot.sendChatAction(chatId, 'typing');
    const events = await EventModel.find();
    const CHUNK_SIZE = 10;
    const eventChunks = getEventChunks(events, CHUNK_SIZE);
    const userRecomendation: { venue: string; ticketLink: string; message: string; score: number }[] = [];

    user.lastRecommendationIndex = 0;

    for (let i = 0; i < eventChunks.length; i++) {
      const chunk = eventChunks[i];
      const userSession = await User.findOne({ chatId });
      if (userSession?.stopSession) {
        return;
      }

      const recommendations = await getRecommendations(chunk, user);
      userRecomendation.push(...recommendations);

      console.log("USERRECOMMENDATIONS", userRecomendation);
    }

    user.recommendations = userRecomendation.sort((a, b) => b.score - a.score);
    console.log('DB RECOMMENDATIONS', user.recommendations);
    await User.findByIdAndUpdate(user._id, { recommendations: user.recommendations });

    await bot.sendMessage(chatId, '‚ú® –ú—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –≤–∞—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏!');

    await sendNextEvent(chatId);

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è chatId ${chatId}:`, error);
    await bot.sendMessage(chatId, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.');
  }
});

const sendNextEvent = async (chatId: number) => {
  const user = await User.findOne({ chatId });

  if (!user || !user.recommendations || user.recommendations.length === 0) {
    await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.');
    return;
  }

  if (user.stopSession) {
    return;
  }

  const nextEvent = user.recommendations[user.lastRecommendationIndex || 0];

  if (!nextEvent) {
    await bot.sendMessage(chatId, '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å!');
    return;
  }

  await bot.sendMessage(chatId, nextEvent.message.replace(/\\n/g, '\n'), {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã", url: nextEvent.ticketLink }],
        [{ text: "üîú –°–ª–µ–¥—É—é—â–∏–π –∏–≤–µ–Ω—Ç", callback_data: 'next_event' }]
      ]
    }
  });
  user.lastRecommendationIndex = (user.lastRecommendationIndex ?? 0) + 1;
  await User.findByIdAndUpdate(user._id, { lastRecommendationIndex: user.lastRecommendationIndex });
};

const sendNextGeneratedEvent = async (chatId: number) => {
  const user = await User.findOne({ chatId });

  if (!user || !user.generatedPosts || user.generatedPosts.length === 0) {
    await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.');
    return;
  }

  if (user.stopSession) {
    return;
  }

  const nextEvent = user.generatedPosts[user.lastGeneratedPostIndex || 0];

  if (!nextEvent || !nextEvent.message) {
    await bot.sendMessage(chatId, '–ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞.');
    return;
  }

  await bot.sendMessage(chatId, nextEvent.message.replace(/\\n/g, '\n'), {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã", url: nextEvent.ticketLink }],
        [{ text: "üîú –°–ª–µ–¥—É—é—â–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–≤–µ–Ω—Ç", callback_data: 'next_generated_event' }]
      ]
    }
  });
  user.lastGeneratedPostIndex = (user.lastGeneratedPostIndex ?? 0) + 1;
  await User.findByIdAndUpdate(user._id, { lastGeneratedPostIndex: user.lastGeneratedPostIndex });
};

bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message?.chat.id;

  if (!chatId) return;

  const action = callbackQuery.data;

  if (action === 'next_event') {
    await sendNextEvent(chatId);
  } else if (action === 'next_generated_event') {
    await sendNextGeneratedEvent(chatId);
  }

  bot.answerCallbackQuery(callbackQuery.id);
});

cron.schedule('0 */6 * * *', async () => {
  console.log('–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
  try {
    const users = await User.find();
    for (const user of users) {
      if (!user.stopSession) {
        await sendNextEvent(Number(user.chatId));
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–ª–∞–Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
  }
});

const getEmbedding = async (content: string|undefined, user: any): Promise<number[]> => {
  const userPreferences = `
    –ë—é–¥–∂–µ—Ç: ${user.spendingLimit ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'}
    –£–≤–ª–µ—á–µ–Ω–∏—è: ${user.hobbies?.join(', ') ?? '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
  `;
  const input = `${content}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:\n${userPreferences}`;

  const response = await openai.embeddings.create({
    model: 'text-embedding-ada-002',
    input: input,
  });

  if (response.data && response.data[0] && response.data[0].embedding) {
    return response.data[0].embedding;
  } else {
    throw new Error('Invalid response from OpenAI API');
  }
};

const classifyAndEnhanceMessage = async (message: string): Promise<{ isRelated: boolean|undefined, response: string|undefined }> => {
  const systemPrompt = `–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–º–æ—â–Ω–∏–∫–æ–º –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –ê–ª–º–∞—Ç—ã. –í –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Å–æ–±—ã—Ç–∏—è –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–µ –≤ –ê–ª–º–∞—Ç—ã. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º, –æ—Ç–≤–µ—Ç—å—Ç–µ JSON-–æ–±—ä–µ–∫—Ç–æ–º {"isRelated": true, "response": "—É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"}. –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–≤–µ—Ç—å—Ç–µ JSON-–æ–±—ä–µ–∫—Ç–æ–º {"isRelated": false, "response": "–ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç"}.

        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç —Ç–∞–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, –∫–∞–∫ "–∑–∞–≤—Ç—Ä–∞", –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–æ—á–Ω—É—é –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –æ–Ω —Å—Å—ã–ª–∞–µ—Ç—Å—è, –∏ –≤–∫–ª—é—á–∏—Ç–µ –µ–µ –≤ —É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å.

        –ù–µ –≤–∫–ª—é—á–∞–π—Ç–µ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç JSON.

        –ü—Ä–∏–º–µ—Ä 1:
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ú–æ–∂–µ—Ç–µ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –ê–ª–º–∞—Ç—ã –Ω–∞ —ç—Ç–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö?"
        –ü–æ–º–æ—â–Ω–∏–∫: {"isRelated": true, "response": "–†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ –≤ –ê–ª–º–∞—Ç—ã –Ω–∞ —ç—Ç–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö"}

        –ü—Ä–∏–º–µ—Ä 2:
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ß—Ç–æ –º–Ω–µ –Ω–∞–¥–µ—Ç—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?"
        –ü–æ–º–æ—â–Ω–∏–∫: {"isRelated": false, "response": "–ù–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–ª–µ–¥—É–µ—Ç –Ω–∞–¥–µ—Ç—å –∫–æ—Å—Ç—é–º –∏–ª–∏ –≤–µ—á–µ—Ä–Ω–µ–µ –ø–ª–∞—Ç—å–µ."}

        –ü—Ä–∏–º–µ—Ä 3:
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞–≤—Ç—Ä–∞?"
        –ü–æ–º–æ—â–Ω–∏–∫: {"isRelated": true, "response": "–†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ –≤ –ê–ª–º–∞—Ç—ã –∑–∞–≤—Ç—Ä–∞"}
        `;

  const response = await openai.chat.completions.create({
    model: 'gpt-4o',
    messages: [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: message }
    ]
  });

  const answer = response.choices[0].message.content?.trim();
  try {
    const jsonResponse = answer ? JSON.parse(answer) : undefined;
    return { isRelated: jsonResponse.isRelated, response: jsonResponse.response };
  } catch (error) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç–≤–µ—Ç –æ—Ç GPT');
  }
};

bot.on('voice', async (msg) => {
  const chatId = msg.chat.id;
  const fileId = msg.voice.file_id;

  try {
    const fileLink = await bot.getFileLink(fileId);
    const audioPath = `./voice_${fileId}.ogg`;

    // –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const response = await axios({
      method: 'get',
      url: fileLink,
      responseType: 'stream',
    });

    const writer = fs.createWriteStream(audioPath);
    response.data.pipe(writer);

    writer.on('finish', async () => {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG —Ñ–∞–π–ª–∞ –≤ FLAC –¥–ª—è Google Speech-to-Text
      const flacPath = audioPath.replace('.ogg', '.flac');
      await convertOggToFlac(audioPath, flacPath);

      const audio = fs.readFileSync(flacPath);
      const audioBytes = audio.toString('base64');

      const request = {
        audio: { content: audioBytes },
        config: {
          encoding: 'FLAC' as const,
          sampleRateHertz: 16000,
          languageCode: 'ru-RU',
        },
      };

      const [response] = await speechClient.recognize(request);

      const transcription = response.results
        ?.map(result => result.alternatives?.[0]?.transcript)
        .join('\n');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç
      await bot.sendMessage(chatId, `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ${transcription}`);

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      fs.unlinkSync(audioPath);
      fs.unlinkSync(flacPath);
    });

    writer.on('error', () => {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    });
  } catch (error) {
    console.error('Error processing voice message:', error);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
});

async function convertOggToFlac(inputPath: string, outputPath: string): Promise<void> {
  return new Promise<void>((resolve, reject) => {
    ffmpeg(inputPath)
      .toFormat('flac')
      .on('end', () => resolve())
      .on('error', err => reject(err))
      .save(outputPath);
  });
}



export default bot;


