import TelegramBot from 'node-telegram-bot-api';
import { getEventChunks, getRecommendations } from './recomendation';
import User from './user/models/User';
import 'dotenv/config';
import buyTickets from './buyTickets';
import EventModel from './event/models/Event';
import cron from 'node-cron';

// CHANGE TOKEN IF YOU DEPLOY
const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN_DEV || '';
if (!TELEGRAM_TOKEN) {
  throw new Error('TELEGRAM_TOKEN is not set');
}

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

console.log('Telegram bot started');

interface UserPreferences {
  spendingLimit?: number;
  hobbies?: string[];
  userName?: string;
  recommendations?: string[];
  lastRecommendationIndex?: number;
  pendingTicketPurchase?: {
    url: string;
    chatId: string;
  };
}

const userSetupStages: { [chatId: string]: { stage: number, field?: string } } = {};

const commandMenu = [
  [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç', callback_data: '/change_spendingLimit' }],
  [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å —É–≤–ª–µ—á–µ–Ω–∏—è', callback_data: '/change_hobbies' }],
  [{ text: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–∞–Ω—Å', callback_data: '/stop_session' }],
];

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userName = msg.from?.username || '';
  console.log('username', userName);

  if (userName) {
    let user = await User.findOne({ userName });
    if (!user) {
      user = new User({
        userName,
        chatId,
        recommendations: [],
        lastRecommendationIndex: 0,
        stopSession: false
      });
      await user.save();
      userSetupStages[chatId] = { stage: 0 };

      await bot.sendMessage(chatId, `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *${userName}*, –≤ Seruen! –ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞–º. –î–∞–≤–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –∏ –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ! –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:`, { parse_mode: 'Markdown' });
    } else {
      user.chatId = chatId.toString();
      user.stopSession = false;
      await user.save();

      const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *${userName}*, –≤ Seruen! –ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞–º. –¢–µ–ø–µ—Ä—å –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ!`;

      await bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
      await bot.sendMessage(chatId, '–ú—ã –≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –û–Ω–∏ –Ω–∞—á–Ω—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ!', { parse_mode: 'Markdown' });

      try {
        const events = await EventModel.find();
        const CHUNK_SIZE = 10;
        const eventChunks = getEventChunks(events, CHUNK_SIZE);
        const userRecomendation: { venue: string; ticketLink: string; message: string; score: number }[] = [];

        user.lastRecommendationIndex = 0;

        for (let i = 0; i < eventChunks.length; i++) {
          const chunk = eventChunks[i];
          const userSession = await User.findOne({ chatId });
          if (userSession?.stopSession) {
            return;
          }

          const recommendations = await getRecommendations(chunk, user);
          userRecomendation.push(...recommendations);

          console.log("USERRECOMMENDATIONS", userRecomendation);
        }

        user.recommendations = userRecomendation.sort((a, b) => b.score - a.score);
        console.log('DB RECOMMENDATIONS', user.recommendations);
        await user.save();

        await bot.sendMessage(chatId, '‚ú® –ú—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –≤–∞—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏!', { parse_mode: 'Markdown' });

        await sendNextEvent(chatId);

      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è chatId ${chatId}:`, error);
        await bot.sendMessage(chatId, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.', { parse_mode: 'Markdown' });
      }
    }
  }
});

bot.onText(/\/change_budget/, async (msg) => {
  const chatId = msg.chat.id;
  userSetupStages[chatId] = { stage: 0, field: 'budget' };
  await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç (–≤ —Ç–µ–Ω–≥–µ):', { parse_mode: 'Markdown' });
});

bot.onText(/\/change_hobbies/, async (msg) => {
  const chatId = msg.chat.id;
  userSetupStages[chatId] = { stage: 0, field: 'hobbies' };
  await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–æ–≤—ã–µ —É–≤–ª–µ—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):', { parse_mode: 'Markdown' });
});

bot.onText(/\/stop_session/, async (msg) => {
  const chatId = msg.chat.id;
  const user = await User.findOne({ chatId });
  if (user) {
    user.stopSession = true;
    await user.save();
  }
  delete userSetupStages[chatId];
  await bot.sendMessage(chatId, 'üõë –°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.', { parse_mode: 'Markdown' });
});


bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  if (!(chatId in userSetupStages)) return;

  const user = await User.findOne({ chatId });

  if (!user) {
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.', { parse_mode: 'Markdown' });
    return;
  }

  const { stage, field } = userSetupStages[chatId];

  switch (field) {
    case 'email':
      user.email = msg.text;
      break;
    case 'phone':
      user.phone = msg.text;
      break;
    case 'budget':
      user.spendingLimit = parseInt(msg.text);
      break;
    case 'hobbies':
      user.hobbies = msg.text.split(',').map(item => item.trim());
      break;
    default:
      switch (stage) {
        case 0:
          user.email = msg.text;
          userSetupStages[chatId] = { stage: 1 };
          await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', { parse_mode: 'Markdown' });
          return;
        case 1:
          user.phone = msg.text;
          userSetupStages[chatId] = { stage: 2 };
          await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç (–≤ —Ç–µ–Ω–≥–µ):', { parse_mode: 'Markdown' });
          return;
        case 2:
          user.spendingLimit = parseInt(msg.text);
          userSetupStages[chatId] = { stage: 3 };
          await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):', { parse_mode: 'Markdown' });
          return;
        case 3:
          user.hobbies = msg.text.split(',').map(item => item.trim());
          await user.save();
          delete userSetupStages[chatId];
          await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...', { parse_mode: 'Markdown' });
          break;
      }
  }

  await user.save();
  delete userSetupStages[chatId];
  await bot.sendMessage(chatId, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...', { parse_mode: 'Markdown' });

  try {
    bot.sendMessage(chatId, '–ì–æ—Ç–æ–≤–∏–º –¥–ª—è –í–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...', { parse_mode: 'Markdown' });
    const events = await EventModel.find();
    const CHUNK_SIZE = 10;
    const eventChunks = getEventChunks(events, CHUNK_SIZE);
    const userRecomendation: { venue: string; ticketLink: string; message: string; score: number }[] = [];

    user.lastRecommendationIndex = 0;

    for (let i = 0; i < eventChunks.length; i++) {
      const chunk = eventChunks[i];
      const userSession = await User.findOne({ chatId });
      if (userSession?.stopSession) {
        return;
      }

      const recommendations = await getRecommendations(chunk, user);
      userRecomendation.push(...recommendations);

      console.log("USERRECOMMENDATIONS", userRecomendation);
    }

    user.recommendations = userRecomendation.sort((a, b) => b.score - a.score);
    console.log('DB RECOMMENDATIONS', user.recommendations);
    await user.save();

    await bot.sendMessage(chatId, '‚ú® –ú—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –≤–∞—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏!', { parse_mode: 'Markdown' });

    await sendNextEvent(chatId);

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è chatId ${chatId}:`, error);
    await bot.sendMessage(chatId, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.', { parse_mode: 'Markdown' });
  }
});


const sendNextEvent = async (chatId: number) => {
  const user = await User.findOne({ chatId });

  if (!user || !user.recommendations || user.recommendations.length === 0) {
    await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.', { parse_mode: 'Markdown' });
    return;
  }

  if (user.stopSession) {
    return;
  }

  const nextEvent = user.recommendations[user.lastRecommendationIndex || 0];

  if (!nextEvent) {
    await bot.sendMessage(chatId, 'No more events to show.', { parse_mode: 'Markdown' });
    return;
  }

  await bot.sendMessage(chatId, nextEvent.message.replace(/\\n/g, '\n'), {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã", callback_data: `buy_ticket_${user.lastRecommendationIndex}` }],
        [{ text: "–°–ª–µ–¥—É—é—â–∏–π –∏–≤–µ–Ω—Ç", callback_data: 'next_event' }]
      ]
    }
  });
  user.lastRecommendationIndex = (user.lastRecommendationIndex ?? 0) + 1;
  await user.save();
};

bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg?.chat.id;

  if (!chatId) return;

  const action = callbackQuery.data;

  if (action === 'next_event') {
    sendNextEvent(chatId);
  } else if (action.startsWith('buy_ticket_')) {
    const index = parseInt(action.split('_')[2], 10);
    const user = await User.findOne({ chatId });
    const event = user?.recommendations?.[index];
    if (event) {
      await bot.sendMessage(chatId, `–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${event.venue}`, { parse_mode: 'Markdown' });
      if (event.ticketLink) {
        await bot.sendMessage(chatId, '–ü–æ–∫—É–ø–∞–µ–º –±–∏–ª–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...', { parse_mode: 'Markdown' });
        try {
          await buyTickets(event.ticketLink, chatId, bot);
          await bot.sendMessage(chatId, 'üé´ –ë–∏–ª–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω—ã!', { parse_mode: 'Markdown' });
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è chatId ${chatId}:`, error);
          await bot.sendMessage(chatId, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–ª–µ—Ç–æ–≤.', { parse_mode: 'Markdown' });
        }
      } else {
        await bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.', { parse_mode: 'Markdown' });
      }
    }
  }

  bot.answerCallbackQuery(callbackQuery.id);
});


cron.schedule('0 */6 * * *', async () => {
  console.log('–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
  try {
    const users = await User.find();
    for (const user of users) {
      if (!user.stopSession) {
        await sendNextEvent(Number(user.chatId));
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–ª–∞–Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
  }
});

export default bot;
