import TelegramBot from 'node-telegram-bot-api';
import User from './user/models/User';
import EventModel from './event/models/Event';
import { createHobbiesKeyboard, createPreferencesMenu } from './keyboard';
import { getEventChunks, sendNextEvent, sendNextGeneratedEvent, userSetupStages } from './util';
import { getRecommendations } from './recomendation';
import path from 'path';
import { TG_URL } from './config';

const MAX_CALLBACK_DATA_LENGTH = 64;

function createCallbackData(prefix: string, data: string): string {
  let encodedData = encodeURIComponent(data);
  if (encodedData.length > MAX_CALLBACK_DATA_LENGTH - prefix.length) {
    encodedData = encodedData.substring(0, MAX_CALLBACK_DATA_LENGTH - prefix.length - 3) + '...';
  }
  return `${prefix}_${encodedData}`;
}

export const handleStart = async (bot: TelegramBot, msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  console.log('Received /start in chatId:', chatId);

  const userName = msg.from?.username || '';
  const firstName = msg.from?.first_name || '';

  const uniqueUserId = userName || firstName || `user_${chatId}`;

  if (uniqueUserId) {
    let user = await User.findOne({ userName: uniqueUserId });
    if (!user) {
      user = new User({
        userName: uniqueUserId,
        chatId,
        recommendations: [],
        lastRecommendationIndex: 0,
        generatedPosts: [],
        lastGeneratedPostIndex: 0,
        stopSession: false,
        points: 0 
      });

      if (msg.text.length > 6) {
        const refID = msg.text.slice(7);
        const referrer = await User.findOne({ chatId: refID });
        if (referrer) {
          if (referrer.points !== undefined) {
            referrer.points += 1;
            await referrer.save();
            await bot.sendMessage(referrer.chatId, `üéâ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É –≤–∞—Å —É–∂–µ ${referrer.points}. –ï—Å–ª–∏ —É –≤–∞—Å 10 —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ @us_sun!`);
          }
        }
        await bot.sendMessage(msg.chat.id, `–í—ã –∑–∞—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${refID}`);
      }

      userSetupStages[chatId] = { stage: 0, field: 'budget' };
      await user.save();

      const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName}, –≤ Seruen!
      
–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞–º. –î–∞–≤–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –∏ –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ!`;

      await bot.sendMessage(chatId, welcomeMessage);

      const budgetMessage = '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç:';

      await bot.sendMessage(chatId, budgetMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '0 - 5000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_5000' }, { text: '5000 - 10000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_10000' }],
            [{ text: '10000 - 20000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_20000' }, { text: '20000 - 30000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_30000' }],
            [{ text: '30000 - 40000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_40000' }, { text: '40000 - 50000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_50000' }],
            [{ text: '50000+ —Ç–µ–Ω–≥–µ', callback_data: 'budget_100000' }]
          ]
        }
      });

    } else {
      user.chatId = chatId.toString();
      user.stopSession = false;
      await user.save();

      const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName}, –≤ Seruen!
      
–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å–Ω–æ–≤–∞ —Å –Ω–∞–º–∏. –¢–µ–ø–µ—Ä—å –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ!
–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –º–∏–Ω—É—Ç, –Ω–∞–∂–º–∏—Ç–µ /start –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ @us_sun.`;

      const imagePath = path.join(__dirname, 'assets', 'almaty.png');

      await bot.sendPhoto(chatId, imagePath, { caption: welcomeMessage });

      if (user.spendingLimit && user.hobbies && user.hobbies.length > 0) {
        await bot.sendMessage(chatId, '–ú—ã –≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –û–Ω–∏ –Ω–∞—á–Ω—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ!');
        await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç ${user.userName}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`);

        const events = await EventModel.find();
        const CHUNK_SIZE = 20;
        const eventChunks = getEventChunks(events, CHUNK_SIZE);
        const userRecomendation: { venue: string; ticketLink: string; message: string; score: number }[] = [];

        user.lastRecommendationIndex = 0;

        for (let i = 0; i < eventChunks.length; i++) {
          const chunk = eventChunks[i];
          const userSession = await User.findOne({ chatId });
          if (userSession?.stopSession) {
            return;
          }

          const recommendations = await getRecommendations(chunk, user);
          userRecomendation.push(...recommendations);

          console.log("USERRECOMMENDATIONS", userRecomendation);
        }

        user.recommendations = userRecomendation.sort((a, b) => b.score - a.score);
        console.log('DB RECOMMENDATIONS', user.recommendations);
        await User.findByIdAndUpdate(user._id, { recommendations: user.recommendations });

        await bot.sendMessage(chatId, '–í–∞—à–∏ –∏–≤–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã! –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –≤–∞—à –æ—Ç–¥—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π!', {
          reply_markup: {
            inline_keyboard: [
              [{ text: "Let's goo üöÄ", callback_data: 'lets_goo' }, { text: "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ üåü", callback_data: 'favorite_events' }],
              [{ text: "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üìö", callback_data: 'my_data' }]
            ]
          }
        });
      } else {
        const budgetMessage = '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç:';
        await bot.sendMessage(chatId, budgetMessage, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '0 - 5000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_5000' }, { text: '5000 - 10000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_10000' }],
              [{ text: '10000 - 20000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_20000' }, { text: '20000 - 30000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_30000' }],
              [{ text: '30000 - 40000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_40000' }, { text: '40000 - 50000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_50000' }],
              [{ text: '50000+ —Ç–µ–Ω–≥–µ', callback_data: 'budget_100000' }]
            ]
          }
        });
      }
    }
  }
};

export const handleMenu = async (bot: TelegramBot, msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: "Let's goo üöÄ", callback_data: 'lets_goo' }, { text: "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ üåü", callback_data: 'favorite_events' }],
        [{ text: "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üìö", callback_data: 'my_data' }]
      ]
    }
  });
};

export const handleChangeBudget = async (bot: TelegramBot, msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const user = await User.findOne({ chatId });

  if (!user) {
    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.');
    return;
  }

  userSetupStages[chatId] = { stage: 0, field: 'budget' };

  const keyboard = [
    [{ text: '0 - 5000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_5000' }, { text: '5000 - 10000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_10000' }],
    [{ text: '10000 - 20000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_20000' }, { text: '20000 - 30000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_30000' }],
    [{ text: '30000 - 40000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_40000' }, { text: '40000 - 50000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_50000' }],
    [{ text: '50000+ —Ç–µ–Ω–≥–µ', callback_data: 'budget_100000' }]
  ];

  const selectedBudget = user.spendingLimit;
  const updatedKeyboard = keyboard.map(row =>
    row.map(button => ({
      ...button,
      text: button.callback_data === `budget_${selectedBudget}` ? `‚úÖ ${button.text}` : button.text
    }))
  );

  await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç:', {
    reply_markup: {
      inline_keyboard: updatedKeyboard
    }
  });
};

export const handleChangeHobbies = async (bot: TelegramBot, msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const user = await User.findOne({ chatId });

  if (!user) {
    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.');
    return;
  }

  userSetupStages[chatId] = { stage: 0, field: 'hobbies' };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const selectedHobbies = user.hobbies || [];

  await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è:', {
    reply_markup: createHobbiesKeyboard(selectedHobbies)
  });
};

export const handleChangePreferences = async (bot: TelegramBot, msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', {
    reply_markup: createPreferencesMenu()
  });
};

export const handleViewData = async (bot: TelegramBot, msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const user = await User.findOne({ chatId });

  if (!user) {
    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.');
    return;
  }

  const preferencesMessage = `–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
  
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.userName}
–ë—é–¥–∂–µ—Ç: ${user.spendingLimit || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–£–≤–ª–µ—á–µ–Ω–∏—è: ${user.hobbies?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
`;
  await bot.sendMessage(chatId, preferencesMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ò–∑–º–µ–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç üí∞", callback_data: 'change_budget' }, { text: "–ò–∑–º–µ–Ω–∏—Ç—å —É–≤–ª–µ—á–µ–Ω–∏—è üé®", callback_data: 'change_hobbies' }],
      ]
    }
  });
};

export const handleReferral = async (bot: TelegramBot, msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const referralLink = `${TG_URL}?start=${chatId}`;
  await bot.sendMessage(chatId, `–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã! –í–æ—Ç –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${referralLink}`);
};

export const handleCallbackQuery = async (bot: TelegramBot, callbackQuery: TelegramBot.CallbackQuery) => {
  const chatId = callbackQuery.message?.chat.id;

  if (!chatId) return;

  const action = callbackQuery.data;
  console.log(`Received callback_query: ${action} from chatId: ${chatId}`);

  const user = await User.findOne({ chatId });
  if (!user) return;

  const messageText = callbackQuery.message?.text || "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è";

  if (action.startsWith('budget_')) {
    const budget = parseInt(action.replace('budget_', ''));
    user.spendingLimit = budget;
    await User.findByIdAndUpdate(user._id, { spendingLimit: budget });

    if (user.hobbies && user.hobbies.length > 0) {
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –Ω–µ –ø—Ä–æ—Å–∏–º –º–µ–Ω—è—Ç—å —Ö–æ–±–±–∏
      delete userSetupStages[chatId];
      await bot.editMessageText('–í–∞—à –±—é–¥–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.', {
        chat_id: chatId,
        message_id: callbackQuery.message?.message_id,
      });
    } else {
      // –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Ö–æ–±–±–∏
      userSetupStages[chatId] = { stage: 0, field: 'hobbies' };
      await bot.editMessageText('–í–∞—à –±—é–¥–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è:', {
        chat_id: chatId,
        message_id: callbackQuery.message?.message_id,
        reply_markup: createHobbiesKeyboard([])
      });
    }
  } else if (action.startsWith('hobby_')) {
    const hobby = action;
    if (!user.hobbies) user.hobbies = [];
    const hobbyIndex = user.hobbies.indexOf(hobby);
    if (hobbyIndex === -1) {
      user.hobbies.push(hobby);
    } else {
      user.hobbies.splice(hobbyIndex, 1);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ä–∞–∑—É, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ë–î
    const newKeyboard = createHobbiesKeyboard(user.hobbies);
    await bot.editMessageReplyMarkup(newKeyboard, { chat_id: chatId, message_id: callbackQuery.message?.message_id });
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–í–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!' });

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    await User.findByIdAndUpdate(user._id, { hobbies: user.hobbies });

  } else if (action === 'hobbies_done') {
    delete userSetupStages[chatId];
    await bot.editMessageText(`–û—Ç–ª–∏—á–Ω–æ! –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥—Ä—É–∑—è—Ç—Å—è, —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üòÑ –ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –∏–≤–µ–Ω—Ç—ã –∏–ª–∏ –≤ —Ü–µ–ª–æ–º –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç!

A –µ—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—Å–∏–ª–æ 5 –º–∏–Ω—É—Ç —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start.`, 
        { chat_id: chatId, message_id: callbackQuery.message?.message_id });
        await bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?');
    // –ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    try {
      const events = await EventModel.find();
      const CHUNK_SIZE = 20;
      const eventChunks = getEventChunks(events, CHUNK_SIZE);
      const userRecomendation: { venue: string; ticketLink: string; message: string; score: number }[] = [];

      user.lastRecommendationIndex = 0;

      for (let i = 0; i < eventChunks.length; i++) {
        const chunk = eventChunks[i];
        const userSession = await User.findOne({ chatId });
        if (userSession?.stopSession) {
          return;
        }

        const recommendations = await getRecommendations(chunk, user);
        userRecomendation.push(...recommendations);

        console.log("USERRECOMMENDATIONS", userRecomendation);
      }

      user.recommendations = userRecomendation.sort((a, b) => b.score - a.score);
      console.log('DB RECOMMENDATIONS', user.recommendations);
      await User.findByIdAndUpdate(user._id, { recommendations: user.recommendations });

      await bot.sendMessage(chatId, '–í–∞—à–∏ –∏–≤–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã! –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –≤–∞—à –æ—Ç–¥—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π!', {
        reply_markup: {
          inline_keyboard: [
            [{ text: "Let's goo üöÄ", callback_data: 'lets_goo' }, { text: "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã üåü", callback_data: 'favorite_events' }],
            [{ text: "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üìö", callback_data: 'my_data' }]
          ]
        }
      });

    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è chatId ${chatId}:`, error);
      await bot.sendMessage(chatId, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @us_sun');
    }
  } else if (action === 'change_budget') {
    userSetupStages[chatId] = { stage: 0, field: 'budget' };
    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '0 - 5000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_5000' }, { text: '5000 - 10000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_10000' }],
          [{ text: '10000 - 20000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_20000' }, { text: '20000 - 30000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_30000' }],
          [{ text: '30000 - 40000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_40000' }, { text: '40000 - 50000 —Ç–µ–Ω–≥–µ', callback_data: 'budget_50000' }],
          [{ text: '50000+ —Ç–µ–Ω–≥–µ', callback_data: 'budget_100000' }]
        ]
      }
    });
  } else if (action === 'change_hobbies') {
    userSetupStages[chatId] = { stage: 0, field: 'hobbies' };
    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –Ω–æ–≤—ã–µ —É–≤–ª–µ—á–µ–Ω–∏—è:', {
      reply_markup: createHobbiesKeyboard(user.hobbies || [])
    });
  } else if (action === 'view_preferences') {
    const preferencesMessage = `–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
    
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.userName}
–ë—é–¥–∂–µ—Ç: ${user.spendingLimit || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–£–≤–ª–µ—á–µ–Ω–∏—è: ${user.hobbies?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
`;
    await bot.sendMessage(chatId, preferencesMessage);
  } else if (action === 'next_event') {
    await sendNextEvent(chatId);
  } else if (action === 'next_generated_event') {
    await sendNextGeneratedEvent(chatId);
  } else if (action === 'lets_goo') {
    await sendNextEvent(chatId);
  } else if (action === 'favorite_events') {
    if (user.likedEvents && user.likedEvents.length > 0) {
      for (const likedEvent of user.likedEvents) {
        if (likedEvent.message) {
          await bot.sendMessage(chatId, likedEvent.message, {
            reply_markup: {
              inline_keyboard: [
                [{ text: "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã", url: likedEvent.ticketLink }]
              ]
            }
          });
        }
      }
    } else {
      await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤.');
    }
  } else if (action === 'my_data') {
    await bot.sendMessage(chatId, `–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
    
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.userName}
–ë—é–¥–∂–µ—Ç: ${user.spendingLimit || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–£–≤–ª–µ—á–µ–Ω–∏—è: ${user.hobbies?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
`, {
  reply_markup: {
    inline_keyboard: [
      [{ text: "–ò–∑–º–µ–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç üí∞", callback_data: 'change_budget' }, { text: "–ò–∑–º–µ–Ω–∏—Ç—å —É–≤–ª–µ—á–µ–Ω–∏—è üé®", callback_data: 'change_hobbies' }],
    ]
  }
});
  } else if (action.startsWith('like_event')) {
    const ticketLink = decodeURIComponent(action.replace('like_event_', ''));
    const event = await EventModel.findOne({ ticketLink: new RegExp(ticketLink) });
    if (event) {
      user.likedEvents = user.likedEvents || [];
      user.likedEvents.push({ title: event.title, date: event.date || '', message: callbackQuery.message?.text || '', ticketLink: event.ticketLink || '' });
      await User.findByIdAndUpdate(user._id, { likedEvents: user.likedEvents });
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—Ç–ª–∏—á–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∏–≤–µ–Ω—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö' });
    }
    await sendNextEvent(chatId);
  } else if (action.startsWith('like_generated_event')) {
    const ticketLink = decodeURIComponent(action.replace('like_generated_event_', ''));
    const event = await EventModel.findOne({ ticketLink: new RegExp(ticketLink) });
    if (event) {
      user.likedEvents = user.likedEvents || [];
      user.likedEvents.push({ title: event.title, date: event.date || '', message: callbackQuery.message?.text || '', ticketLink: event.ticketLink || '' });
      await User.findByIdAndUpdate(user._id, { likedEvents: user.likedEvents });
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—Ç–ª–∏—á–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∏–≤–µ–Ω—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö' });
    }
    await sendNextGeneratedEvent(chatId);
  } else if (action.startsWith('dislike_event')) {
    const ticketLink = decodeURIComponent(action.replace('dislike_event_', ''));
    const event = await EventModel.findOne({ ticketLink: new RegExp(ticketLink) });
    if (event) {
      user.dislikedEvents = user.dislikedEvents || [];
      user.dislikedEvents.push({ title: event.title, date: event.date || '', message: callbackQuery.message?.text || '', ticketLink: event.ticketLink || '' });
      await User.findByIdAndUpdate(user._id, { dislikedEvents: user.dislikedEvents });
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–ú—ã —Ä–µ–∂–µ –±—É–¥–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã.' });
      await bot.deleteMessage(chatId, callbackQuery.message?.message_id || '');
    }
    await sendNextEvent(chatId);
  }

  bot.answerCallbackQuery(callbackQuery.id);
};

export const handleMenuCommand = async (bot: TelegramBot, msg: TelegramBot.Message) => {
  await handleMenu(bot, msg);
};

export const handleViewFavorites = async (bot: TelegramBot, msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const user = await User.findOne({ chatId });

  if (!user) {
    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.');
    return;
  }

  if (user.likedEvents && user.likedEvents.length > 0) {
    for (const likedEvent of user.likedEvents) {
      if (likedEvent.message) {
        await bot.sendMessage(chatId, likedEvent.message, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã", url: likedEvent.ticketLink }]
            ]
          }
        });
      }
    }
  } else {
    await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤.');
  }
};

export const handleStopSession = async (bot: TelegramBot, msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const user = await User.findOne({ chatId });

  if (!user) {
    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.');
    return;
  }

  user.stopSession = true;
  await User.findByIdAndUpdate(user._id, { stopSession: true });

  await bot.sendMessage(chatId, '–°–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.');
};
